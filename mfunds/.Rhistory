crime.raw.clean <- crime.raw[!row.has.na,]
require(Amelia)
missmap(crime.raw.void, main="crime.raw.void - Missings Map",
col=c("yellow", "black"), legend=FALSE)
dataclean = function(dataset) {
dataset<-dataset[-which(dataset$Month=="Month"), ]
vars <- c("year", "month")
dataset <- separate(dataset, Month, into = vars, sep = "-")
return(dataset)
}
crime.raw.clean = dataclean(crime.raw.clean) # we remove some duplicate headers
sDrugs <- crime.raw.clean  %>% filter( Crimetype == 'Drugs')
require(ggmap)
area_map_obj = get_map("LONDON ", zoom = 12, maptype = "toner-background",  source = "stamen")
satellite =get_map("LONDON", zoom = 12,  source = "google", maptype = "satellite")
mapImageData2 <- get_map("LONDON",
color = "color",
source = "google",
maptype = "terrain",
zoom = 12)
d = sDrugs %>%     mutate(lon = Longitude, lat = Latitude)
d$lon <- as.numeric (d$lon)
d$lat <- as.numeric (d$lat)
d$Longitude <-  as.numeric (d$Longitude)
d$Latitude <- as.numeric (d$Latitude)
draw_density_map_of_offenses_for_borough = function(area_map_obj, d) {
ggmap(area_map_obj, base_layer = ggplot(aes(x = lon, y = lat), data = d)) +
stat_density2d(aes(x = lon, y = lat), data = d, color = "blue", alpha = 0.5) +
stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),
bins = 7, geom = "polygon", alpha = 0.3, contour = T, data = d) +
scale_fill_gradient(low = "green", high = "red") + facet_wrap(~Crimetype,
nrow = 2)
}
draw_density_map_of_offenses_for_borough(mapImageData2, d)
d <- diamonds[sample(nrow(diamonds), 500), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(htmlwidgets)
library(leaflet)
showmap = function(dataset) {
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=as.integer(dataset$Longitude), lat=as.integer(dataset$Latitude),
popup=dataset$Crimetype,
clusterOptions = markerClusterOptions())
m  # Print the map
}
showmap(sDrugs)
rm(list = ls())
library(data.table)
library(ggplot2) # graph
library(plotly)  # grapgh
library(tidyr)   #separate
library(dplyr)#select
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\sinsinlondon\\input\\")} else{setwd("~/dataScience/projects/repo/crime/code/")}
readData <- function(path.name, file.name,  missing.types, types) {
fread(  paste(path.name, file.name, sep="") ,
colClasses=types,
na.strings=missing.types,
verbose = FALSE, showProgress = FALSE )
}
types <- c(
'Crime ID'             ='character',
'Month'                ='character',
'Reported by'          ='NULL',
'Falls within'         ='NULL',
'Longitude'            ='integer',
'Latitude'             ='integer',
'Location'             ='character',
'LSOA code'            ='character',
'LSOA name'            ='character',
'Crime type'           ='character',
'Last outcome category'='character',
'Context'              ='NULL'
)
missing.types <- c("NA", "")
crime.raw <- readData('../input/', "test.csv",   missing.types,types  )
names(crime.raw) <- c( "CrimeID",  "Month",  "Longitude",  "Latitude", "Location",    "LSOAcode",   "LSOAname",  "Crimetype", "Lastoutcomecategory")
sDrugs <- crime.raw.clean  %>% filter( Crimetype == 'Drugs')
crime.raw.clean = dataclean(crime.raw.clean) # we remove some duplicate headers
dataclean = function(dataset) {
dataset<-dataset[-which(dataset$Month=="Month"), ]
vars <- c("year", "month")
dataset <- separate(dataset, Month, into = vars, sep = "-")
return(dataset)
}
crime.raw.clean = dataclean(crime.raw.clean) # we remove some duplicate headers
row.has.na <- apply(crime.raw, 1, function(x){any(is.na(x))})
crime.raw.void <- crime.raw[row.has.na,]
crime.raw.clean <- crime.raw[!row.has.na,]
require(Amelia)
missmap(crime.raw.void, main="crime.raw.void - Missings Map",
col=c("yellow", "black"), legend=FALSE)
crime.raw.clean = dataclean(crime.raw.clean) # we remove some duplicate headers
sDrugs <- crime.raw.clean  %>% filter( Crimetype == 'Drugs')
showmap = function(dataset) {
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=as.integer(dataset$Longitude), lat=as.integer(dataset$Latitude),
popup=dataset$Crimetype,
clusterOptions = markerClusterOptions())
m  # Print the map
}
showmap(sDrugs)
d = sDrugs %>%     mutate(lon = Longitude, lat = Latitude)
View(d)
View(sDrugs)
str(d)
d$lon <- as.numeric (d$lon)
d$lat <- as.numeric (d$lat)
showmap(sDrugs)
str(d)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=dataset$lon, lat=dataset$lat,
popup=dataset$Crimetype,
clusterOptions = markerClusterOptions())
# install.packages("ff")
library(ff)
library(dplyr)
setwd("D:\\repos\\blog\\sinsinlondon\\input\\")
# since the csv has around 1.1 million lines, we use ffdf for fast loading
t = read.csv.ffdf(file="datalondon.csv", header=TRUE,
VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
# convert ffdf type to data.frame for later conversion
t = as.data.frame(t)
# convert some columns with unnecesary factor type into character type
t$Identifier = as.character(t$Identifier)
rm(list = ls())
t = read.csv.ffdf(file="datalondon.csv", header=TRUE,
VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
library(ff)
library(dplyr)
setwd("D:\\repos\\blog\\sinsinlondon\\input\\")
t = read.csv.ffdf(file="datalondon.csv", header=TRUE,
VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
setwd("D:\\repos\\blog\\sinsinlondon\\input\\")
setwd("D:\\repos\\blog\\sinsinlondon\\input\\")
t = read.csv.ffdf(file="datalondon.csv", header=TRUE,       VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
t = read.csv.ffdf(file="\\datalondon.csv", header=TRUE,       VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
t = read.csv.ffdf(file=".\datalondon.csv", header=TRUE,       VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
t = read.csv.ffdf(file="./datalondon.csv", header=TRUE,       VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
# since the csv has around 1.1 million lines, we use ffdf for fast loading
t = read.csv.ffdf(file="D:\\repos\\blog\\sinsinlondon\\input\\datalondon.csv", header=TRUE,       VERBOSE=TRUE, first.rows=10000, next.rows=50000, colClasses=NA)
t = as.data.frame(t)
View(t)
str(t)
rm(list = ls())
setwd("~/dataScience/blog/mfunds/")
setwd("D:\\repos\\blog-master\\mfunds\\")
setwd("D:\\repos\\blog\\mfunds\\")
selected <- readRDS("./input/selected50.rds")
selected <- readRDS("../input/selected50.rds")
data=dplyr::filter(selected,  isin == "GB00BYSYZL73")
View(data)
GB00BYSYZL73 <- dplyr::filter(selected,  isin == "GB00BYSYZL73")
rsi <- RSI(GB00BYSYZL73$Close, n=14)
library(TTR) #  rsi() for calculating simple moving average
rsi <- RSI(GB00BYSYZL73$Close, n=14)
GB00BYSYZL73$rsi <-rsi
View(GB00BYSYZL73)
rsi <- RSI(GB00BYSYZL73$Close, n=14)
GB00B1XFGM25[1:14,rsi] <-rsi
GB00BYSYZL73[1:14,rsi] <-rsi
View(GB00BYSYZL73)
GB00BYSYZL73[1:14,10] <-rsi
GB00BYSYZL73[1:14,10] <-rsi[1:14]
View(GB00BYSYZL73)
GB00BYSYZL73 <- dplyr::filter(selected,  isin == "GB00BYSYZL73")
rsi <- RSI(GB00BYSYZL73$Close, n=14)
View(GB00BYSYZL73)
GB00BYSYZL73[1:14,10] <-rsi[1:14]
View(GB00BYSYZL73)
-rsi[1:14]
rsi
View(GB00BYSYZL73)
GB00BYSYZL73[order(as.Date(GB00BYSYZL73$date, format="%d-%m-%Y")),]
View(GB00BYSYZL73)
G<- dplyr::filter(selected,  isin == "GB00BYSYZL73")
View(G)
View(GB00BYSYZL73)
order(as.Date(GB00BYSYZL73$date, format="%Y-%m-%d"))
GB00BYSYZL73$date
GB00BYSYZL73[order(as.Date(GB00BYSYZL73$date, format="%Y-%m-%d")),]
GBxx <- GB00BYSYZL73[order(as.Date(GB00BYSYZL73$date, format="%Y-%m-%d")),]
View(GBxx)
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
View(GBxx)
View(GBxx)
rm(list = ls())
setwd("D:\\repos\\blog\\mfunds\\")
selected <- readRDS("../input/selected50.rds")
setwd("D:\\repos\\blog\\mfunds\\")
selected <- readRDS("../input/selected50.rds")
library(TTR) #  rsi() for calculating simple moving average
GB00BYSYZL73 <- dplyr::filter(selected,  isin == "GB00BYSYZL73")
rsi <- RSI(GB00BYSYZL73$Close, n=14)
GB00BYSYZL73$rsi  <-rsi
View(GB00BYSYZL73)
setwd("D:\\repos\\blog\\mfunds\\")
selected <- readRDS("../input/selected50.rds")
tail(GBxx, 10)
selected <- readRDS("../input/selected50.rds")
library(TTR) #  rsi() for calculating simple moving average
GBxx<- dplyr::filter(selected,  isin == "GB00BYSYZL73")
GBxx <- GBxx[order(as.Date(GBxx$date, format="%Y-%m-%d")),]
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
tail(GBxx, 10)
tail <- tail(GBxx, 1)
View(tail)
unique(selected$isin)
vector <- unique(selected$isin)
vector[1]
for (i in vector)
{
vector[i]
}
for (i in vector)
{
print(vector[i])
}
i <-1
for (i in vector)
{
print(vector[i])
i++;
for (i in vector)
{
print(vector)
}
vector
for (i in vector)
{
print(i)
}
vector <- unique(selected$isin)
df <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
data <- dplyr::filter(selected,  isin == i)
data <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
tail <- tail(GBxx, 1)
df <-rbind( df ,tail )
}
View(df)
vector <- unique(selected$isin)
df <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
data <- dplyr::filter(selected,  isin == i)
data <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
tail <- tail(GBxx, 1)
print(tail$isin)
df <-rbind( df ,tail )
}
df
setwd("D:\\repos\\blog\\mfunds\\")
selected <- readRDS("../input/selected50.rds")
vector <- unique(selected$isin)
df <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
data <- dplyr::filter(selected,  isin == i)
data <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
tail <- tail(GBxx, 1)
print(tail$isin)
df <-rbind( df ,tail )
GBxx <- NULL
}
vector <- unique(selected$isin)
df <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
data <- dplyr::filter(selected,  isin == i)
data <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
tail <- tail(GBxx, 1)
print(tail$isin)
df <-rbind( df ,tail )
GBxx <- NULL
}
for (i in vector)
{
data <- dplyr::filter(selected,  isin == i)
data <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
rsi <- RSI(GBxx$Close, n=14)
GBxx$rsi <-rsi
tail <- tail(GBxx, 1)
print(tail$isin)
df <-rbind( df ,tail )
#GBxx <- NULL
}
for (i in vector)
{
data <- dplyr::filter(selected,  isin == i)
data <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
rsi <- RSI(data$Close, n=14)
data$rsi <-rsi
tail <- tail(data, 1)
print(tail$isin)
df <-rbind( df ,tail )
#GBxx <- NULL
}
View(df)
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\")} else{setwd("~/dataScience/blog/mfunds/")}
library(data.table)
Holdings = fread('./input/AllHoldings.csv')
View(Holdings)
AllFundFidelity = fread('./input/AllFundFidelity.csv')
View(AllFundFidelity)
View(AllFundFidelity)
vectorPictet <- subset(AllFundFidelity, AllFundFidelity$`Fund Manager` == "picket")
View(vectorPictet)
View(Holdings)
vectorPictet <- subset(AllFundFidelity, AllFundFidelity$`Fund Manager` == "Pictet")
View(vectorPictet)
mylist <- split(AllFundFidelity, AllFundFidelity$`Fund Manager`)
unique(AllFundFidelity$`Fund Manager`)
mylist <- split(AllFundFidelity, AllFundFidelity$`Market sector`)
unique(AllFundFidelity$`Market sector`)
unique(AllFundFidelity$`Morningstar category`)
mylist <- split(AllFundFidelity, AllFundFidelity$`Morningstar category`)
p <- plot_ly(z = volcano, colorscale = "Greys", type = "heatmap")
p
volcano
lefa<-volcano
View(lefa)
matrixV<-volcano
## Objetivo
##mapa de calor que muestra los mas sobreromprados y sobrevendidos
matrixV<-volcano
p <- plot_ly(z = matrixV, colorscale = "Greys", type = "heatmap")
## Objetivo
##mapa de calor que muestra los mas sobreromprados y sobrevendidos
matrixV<-volcano
p <- plot_ly(z = matrixV, colorscale = "Greys", type = "heatmap")
p
View(matrixV)
View(AllFundFidelity)
AllFundFidelity
View(AllFundFidelity)
AllFundFidelity <- select(AllFundFidelity, 1,2,10:13)
View(AllFundFidelity)
AllFundFidelity = fread('./input/AllFundFidelity.csv')
heatFundF <- select(AllFundFidelity, 1,2,12:15)
View(heatFundF)
heatFundF <- select(AllFundFidelity, 1,2,12:16)
View(heatFundF)
heatFundF[complete.cases(heatFundF), ]
View(heatFundF)
complete.cases(heatFundF)
heatFundF[complete.cases(heatFundF), ]
heatFundF <-heatFundF[complete.cases(heatFundF), ]
View(AllFundFidelity)
View(Holdings)
View(heatFundF)
View(AllFundFidelity)
heatFundF <- select(AllFundFidelity, 1,2,5:7, 12:16)
View(heatFundF)
heatFundF <-heatFundF[complete.cases(heatFundF), ]
unique (heatFundF$`Market sector`)
Technology <-subset(AllFundFidelity, heatFundF$`Market sector` == "Technology")
Technology <-subset(heatFundF, heatFundF$`Market sector` == "Technology")
View(Technology)
temp <- temp %>% group_by(Technology$`Asset Class`)%>% summarise(score=mean(Technology$`(Current Yr)`))
temp <- Technology %>% group_by(Technology$`Asset Class`)%>% summarise(score=mean(Technology$`(Current Yr)`))
Technology$`Asset Class`
names(AllFundFidelity)
names(heatFundF)
names(heatFundF) <- ('fundName', 'isin', 'sector', 'mCategory', 'AssetClass', 'y4', 'y3', 'y2', 'y1' ,'y')
names(heatFundF) <- names('fundName', 'isin', 'sector', 'mCategory', 'AssetClass', 'y4', 'y3', 'y2', 'y1' ,'y')
names(heatFundF) <- c('fundName', 'isin', 'sector', 'mCategory', 'AssetClass', 'y4', 'y3', 'y2', 'y1' ,'y')
heatFundF <-heatFundF[complete.cases(heatFundF), ]
unique (heatFundF$sector)
Technology <-subset(heatFundF, sector == "Technology")
temp <- Technology %>% group_by(AssetClass )%>% summarise(score=mean(y))
View(temp)
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(scorey=mean(y))
summarise(scorey1=mean(y1))
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(scorey=mean(y)))%>%
summarise(scorey1=mean(y1))
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(scorey=mean(y)) %>%
summarise(scorey1=mean(y1))
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(c(scorey,a)=mean(C(y,y1)) )
mean(C(y,y1))
temp <-
Technology %>%
group_by(AssetClass )%>%    summarise(c(scorey,a)=mean(C(y,y1)) )
temp <-
Technology %>%
group_by(AssetClass )%>%    summarise(ymean=mean(y) )
temp <-
Technology %>%
group_by(AssetClass )%>%    summarise(ymean=mean(y), y1mean=mean(y1) )
View(temp)
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(ymean=mean(y), y1mean=mean(y1), y2mean=mean(y2) , y3mean=mean(y3),y4mean=mean(y4))
View(temp)
str(temp)
as.matrix(temp)
p <- plot_ly(z = as.matrix(temp), colorscale = "Greys", type = "heatmap")
p
str(volcano)
str(volcano)
str(temp)
temp[,1]
rnames <- temp[,1]                            # assign labels in column 1 to "rnames"
data.matrix(temp[,2:ncol(temp)])
mat_data <- data.matrix(temp[,2:ncol(temp)])  # transform column 2-5 into a matrix
rownames(mat_data) <- rnames                  # assign row names
p <- plot_ly(z = mat_data, colorscale = "Greys", type = "heatmap")
p
View(mat_data)
rownames(mat_data)
rnames
rownames(mat_data) <- rnames
AllFundFidelity = fread('./input/AllFundFidelity.csv')
names(AllFundFidelity)
unique(AllFundFidelity$`Morningstar category`)
heatFundF <- select(AllFundFidelity, 1,2,5:7, 12:16)
names(heatFundF) <- c('fundName', 'isin', 'sector', 'mCategory', 'AssetClass', 'y4', 'y3', 'y2', 'y1' ,'y')
heatFundF <-heatFundF[complete.cases(heatFundF), ]
unique (heatFundF$sector)
Technology <-subset(heatFundF, sector == "Technology")
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(ymean=mean(y), y1mean=mean(y1), y2mean=mean(y2) , y3mean=mean(y3),y4mean=mean(y4))
rnames <- temp[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(temp[,2:ncol(temp)])  # transform column 2-5 into a matrix
rownames(mat_data) <- rnames                  # assign row names
rm(list = ls())
AllFundFidelity = fread('./input/AllFundFidelity.csv')
heatFundF <- select(AllFundFidelity, 1,2,5:7, 12:16)
names(heatFundF) <- c('fundName', 'isin', 'sector', 'mCategory', 'AssetClass', 'y4', 'y3', 'y2', 'y1' ,'y')
heatFundF <-heatFundF[complete.cases(heatFundF), ]
Technology <-subset(heatFundF, sector == "Technology")
View(Technology)
temp <-
Technology %>%
group_by(AssetClass )%>%
summarise(ymean=mean(y), y1mean=mean(y1), y2mean=mean(y2) , y3mean=mean(y3),y4mean=mean(y4))
View(temp)
rnames <- temp[,1]
temp[,2:ncol(temp)]
temp[1,2:ncol(temp)]
temp[,2:ncol(temp)]
mat_data <- data.matrix(temp[,2:ncol(temp)])  # transform column 2-5 into a matrix
View(mat_data)
rownames(mat_data) <- rnames
View(rnames)
rnames[,6]
rnames[-1,]
rownames(mat_data) <- rnames[-1,]
rnames[-c(1),]
rownames(mat_data) <- rnames[-c(1),]
rownames(mat_data) <- c(rnames[-c(1),])
rnames[-c(1),]
rnames <- temp[-c(1),1]
rownames(mat_data) <- rnames
rnames
View(rnames)
rownames(mat_data)
mat_data
rownames(mat_data) <- rnames
View(mat_data)
temp
rnames <- temp[-c(1),1]
mat_data <- data.matrix(temp[-c(1),2:ncol(temp)])
rownames(mat_data) <- rnames
rownames(mat_data) <-  temp[-c(1),1]
rownames(mat_data)
colnames(mat_data)
rnames
rownames
temp[-c(1),1]
temp[-c(1),1]
temp[,1]
rnames <- temp[-c(1),1]
data.matrix(temp[-c(1),2:ncol(temp)])
mat_data <- data.matrix(temp[-c(1),2:ncol(temp)])
rownames(mat_data) <- rnames
rnames
View(heatFundF)
