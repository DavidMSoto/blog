View(ft.df)
View(ETFEI)
sele2 <- data.frame(merge(ETFEI, ITEI, by = "rows.isin", all.x = F))
View(sele2)
sele2 <- data.frame(merge(ETFEI, ITEI, by = "rows.isin", all.x = T))
View(sele2)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(jsonlite)
library(XML)
library(RCurl)
library(stringr)
library(plyr)
url_ETFEI <- "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=ETEXG$XLON_3518|ETALL$$ALL_3518&securityDataPoints=SecId|Name|TenforeId|holdingTypeId|isin|sedol|QR_MonthDate|LegalName|Yield_M12|OngoingCharge|StarRatingM255|CustomCategoryId3Name|CollectedSRRI|QR_GBRReturnM12_5|QR_GBRReturnM12_4|QR_GBRReturnM12_3|QR_GBRReturnM12_2|QR_GBRReturnM12_1|CustomMinimumPurchaseAmount|GBRReturnM0|GBRReturnM12|GBRReturnM36|GBRReturnM60|GBRReturnM120&subUniverseId=ETFEI"
url_ITEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FCGBR%24%24ALL_3519&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CQR_MonthDate%7CLegalName%7CYield_M12%7CAnnualReportOngoingCharge%7CStarRatingM255%7CCustomCategoryId3Name%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=ITEI"
url_MFEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=3000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FOGBR%24%24ALL_3521&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CCustomAttributes1%7CCustomAttributes2%7CCustomExternalURL1%7CCustomExternalURL2%7CCustomExternalURL3%7CCustomIsClosed%7CCustomIsFavourite%7CCustomIsRecommended%7CQR_MonthDate%7CLegalName%7CCustomBuyFee%7CYield_M12%7COngoingCharge%7CCustomCategoryId3Name%7CStarRatingM255%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CCustomValue2%7CCustomAdditionalBuyFee%7CCustomSellFee%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=MFEI"
ETFEI <- getURL(url_ETFEI) %>% fromJSON()  %>% as.data.frame
ITEI<- getURL(url_ITEI) %>% fromJSON()  %>% as.data.frame
MFEI <-getURL(url_MFEI) %>% fromJSON()  %>% as.data.frame
ETFEI
MFEI
ETFEI
MFEI
sele2 <- data.frame(merge(ETFEI, MFEI, by = "rows.Name", all.x = T))
total <- rbind(ETFEI, MFEI)
View(ITEI)
View(ETFEI)
ETFEI[,-28]
ETFEI <- ETFEI[,-28]
View(ETFEI)
total <- rbind(ETFEI, MFEI)
View(ETFEI)
select (ETFEI, 1)
library(dplyr)
select (ETFEI, 1)
View(ETFEI)
View(ETFEI)
select (ETFEI,1,6,9)
select (ETFEI,1,6,9,12,14)
select (MFEI,1,6,9,12,14)
select (ITEI,1,6,9,12,14)
total <- rbind(select (ETFEI,1,6,9,12,14), select (ITEI,1,6,9,12,14))
e <- select (ETFEI,1,6,9,12,14)
i <- select (ITEI,1,6,9,12,14)
rbind(e, i)
View(e)
View(i)
View(i)
names(e)
names(e) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge")
names(i) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge")
ei <- rbind(e, i)
View(ei)
order(ei,5 )
ei[order(ei$OngoingCharge)]
ei[order(OngoingCharge)]
ei[order(5)]
ei[order(5,)]
ei[order(OngoingCharge,)]
ei[order(OngoingCharge),]
View(ei)
newdata <- ei[order(OngoingCharge),]
newdata <- ei[order(Name),]
newdata <- ei[order("Name"),]
View(newdata)
newdata <- ei[order("OngoingCharge"),]
View(newdata)
newdata <- ei[order(ei$OngoingCharge),]
View(newdata)
newdata <- ei[order(ei$Name),]
newdata
newdata <- ei[order(ei$isin),]
newdata
newdata <- ei[order(ei$OngoingCharge),]
newdata
newdata <- ei[order(-ei$OngoingCharge),]
newdata
View(ETFEI)
e <- select (ETFEI,1,6,9,12,14,21)
View(e)
i <- select (ITEI,1,6,9,12,14,21))
View(i)
i <- select (ITEI,1,6,9,12,14,21)
View(i)
View(i)
View(ITEI)
i <- select (ITEI,1,6,9,12,14,16)
names(e) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
names(i) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
ei <- rbind(e, i)
newdata <- ei[order(-ei$category),]
ei <- rbind(e, i)
newdata <- ei[order(-ei$category),]
newdata <- ei[order(-ei$category),]
ei
newdata <- ei[order(-ei$OngoingCharge),]
newdata
m <- select (MFEI,1,6,9,12,14,16)
m
View(MFEI)
head(m)
m
MFEI,1,6,9,12,14,16
MFEI
m
m
MFEI
m <- select (MFEI,1,6,9,12,15,17)
m
m <- select (MFEI,1,6,9,12,15,17)
m
m <- select (MFEI,1,6,9,15,17)
m
MFEI
m <- select (MFEI,1,6,9,15,17, 18)
m
names(m)<- c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
all_products <- rbind (ei, m)
all_products <- all_products[order(-all_products$OngoingCharge),]
all_products
all_products <- all_products[order(all_products$OngoingCharge),]
all_products
e[i,1]
df <- data.frame(stringsAsFactors=FALSE)
end.date <-gsub("-", "/", Sys.Date())
start.date <-gsub("-", "/", Sys.Date()-years(3))
url_ft_base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start.date, "&endDate=", end.date, "&symbol=" )
start.time <- Sys.time()
url_ft = paste0(url_ft_base,e[i,1]) # first column is sthe isnn
url_ft = paste0(url_ft_base,e[1,1]) # first column is sthe isnn
url_ft
url_ft = paste0(url_ft_base,e[1,2]) # first column is sthe isnn
url_ft
url_ft = paste0(url_ft_base,e[1,3]) # first column is sthe isnn
url_ft
df <- data.frame(stringsAsFactors=FALSE)
end.date <-gsub("-", "/", Sys.Date())
start.date <-gsub("-", "/", Sys.Date()-years(3))
url_ft_base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start.date, "&endDate=", end.date, "&symbol=" )
start.time <- Sys.time()
for (i in 1:5){
url_ft = paste0(url_ft_base,e[i,3]) # first column is sthe isnn
ft.xml <- getURL(url_ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , "fundsname"] <- selected_fidelity[i,1] #
ft.df [ , "isin"] <-selected_fidelity[i,2]       #
ft.df [ , "AssetClass"] <-selected_fidelity[i,4]
ft.df [ , "Mcategory"] <-selected_fidelity[i,6]
df <-rbind( df ,ft.df )
}
View(e)
nrow(e)
nrow(e)[]
nrow(e)[1]
getFTData<-function(products,nyear) {
df <- data.frame(stringsAsFactors=FALSE)
start.time <- Sys.time()
end.date <-gsub("-", "/", Sys.Date())
start.date <-gsub("-", "/", Sys.Date()-years(nyear))
url_ft_base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start.date, "&endDate=", end.date, "&symbol=" )
for (i in 1:nrow(e)){
url_ft = paste0(url_ft_base,products[i,3]) # first column is sthe isnn
ft.xml <- getURL(url_ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , "fundsname"] <- products[i,2] #
ft.df [ , "isin"] <-products[i,3]       #
ft.df [ , "lname"] <-products[i,4]
ft.df [ , "category"] <-products[i,5]
df <-rbind( df ,ft.df )
}
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
return(df)
}
ft <- getFTData (e, 1)
getFTData<-function(products,nyear) {
df <- data.frame(stringsAsFactors=FALSE)
start.time <- Sys.time()
end.date <-gsub("-", "/", Sys.Date())
start.date <-gsub("-", "/", Sys.Date()-years(nyear))
url_ft_base <- paste0("http://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start.date, "&endDate=", end.date, "&symbol=" )
for (i in 1:nrow(e)){
url_ft = paste0(url_ft_base,products[i,3]) # first column is sthe isnn
ft.xml <- getURL(url_ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , "fundsname"] <- products[i,2] #
ft.df [ , "isin"] <-products[i,3]       #
ft.df [ , "lname"] <-products[i,4]
ft.df [ , "category"] <-products[i,5]
df <-rbind( df ,ft.df )
}
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
return(df)
}
ft <- getFTData (e, 1)
df <- data.frame(stringsAsFactors=FALSE)
start.time <- Sys.time()
end.date <-gsub("-", "/", Sys.Date())
start.date <-gsub("-", "/", Sys.Date()-years(nyear))
start.date <-gsub("-", "/", Sys.Date()-years(1))
url_ft_base <- paste0("http://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start.date, "&endDate=", end.date, "&symbol=" )
url_ft = paste0(url_ft_base,e[i,3]) # first column is sthe isnn
ft.xml <- getURL(url_ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
getURL(url_ft)
url_ft
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(jsonlite)  )
suppressWarnings(library(XML)       )
suppressWarnings(library(RCurl)     )
suppressWarnings(library(stringr)   )
suppressWarnings(library(plyr)      )
suppressWarnings(library(dplyr)     )
suppressWarnings(library(lubridate) )
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(XML)
library(RCurl)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
url_ETFEI <- "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=ETEXG$XLON_3518|ETALL$$ALL_3518&securityDataPoints=SecId|Name|TenforeId|holdingTypeId|isin|sedol|QR_MonthDate|LegalName|Yield_M12|OngoingCharge|StarRatingM255|CustomCategoryId3Name|CollectedSRRI|QR_GBRReturnM12_5|QR_GBRReturnM12_4|QR_GBRReturnM12_3|QR_GBRReturnM12_2|QR_GBRReturnM12_1|CustomMinimumPurchaseAmount|GBRReturnM0|GBRReturnM12|GBRReturnM36|GBRReturnM60|GBRReturnM120&subUniverseId=ETFEI"
ETFEI <- getURL(url_ETFEI) %>% fromJSON()  %>% as.data.frame
url_ITEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FCGBR%24%24ALL_3519&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CQR_MonthDate%7CLegalName%7CYield_M12%7CAnnualReportOngoingCharge%7CStarRatingM255%7CCustomCategoryId3Name%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=ITEI"
ITEI<- getURL(url_ITEI) %>% fromJSON()  %>% as.data.frame
select (ITEI,"Name", "isin")
start_date <-gsub("-", "/", Sys.Date()-months(56))
df <- data.frame(stringsAsFactors=FALSE)
start_time <- Sys.time()
end_date <-gsub("-", "/", Sys.Date())
start_date <-gsub("-", "/", Sys.Date()-months(3))
url_ft_base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start_date, "&endDate=", end_date, "&symbol=IE00BYPLS672" )
ft.xml <- getURL(url_ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
ft.xml <- getURL(url_ft_base) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
products <- "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=ETEXG$XLON_3518|ETALL$$ALL_3518&securityDataPoints=SecId|Name|TenforeId|holdingTypeId|isin|sedol|QR_MonthDate|LegalName|Yield_M12|OngoingCharge|StarRatingM255|CustomCategoryId3Name|CollectedSRRI|QR_GBRReturnM12_5|QR_GBRReturnM12_4|QR_GBRReturnM12_3|QR_GBRReturnM12_2|QR_GBRReturnM12_1|CustomMinimumPurchaseAmount|GBRReturnM0|GBRReturnM12|GBRReturnM36|GBRReturnM60|GBRReturnM120&subUniverseId=ETFEI"
url_ETFEI <- "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=ETEXG$XLON_3518|ETALL$$ALL_3518&securityDataPoints=SecId|Name|TenforeId|holdingTypeId|isin|sedol|QR_MonthDate|LegalName|Yield_M12|OngoingCharge|StarRatingM255|CustomCategoryId3Name|CollectedSRRI|QR_GBRReturnM12_5|QR_GBRReturnM12_4|QR_GBRReturnM12_3|QR_GBRReturnM12_2|QR_GBRReturnM12_1|CustomMinimumPurchaseAmount|GBRReturnM0|GBRReturnM12|GBRReturnM36|GBRReturnM60|GBRReturnM120&subUniverseId=ETFEI"
products <- getURL(url_ETFEI) %>% fromJSON()  %>% as.data.frame
View(products)
ETFEI <- select (products,1,6,9,12,14,21)
names(ETFEI) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
df <- data.frame(stringsAsFactors=FALSE)
start_time <- Sys.time()
end_date <-gsub("-", "/", Sys.Date())
start_date <-gsub("-", "/", Sys.Date()-months(3))
url_ft_base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=", start_date, "&endDate=", end_date, "&symbol=IE00BYPLS672" )
ft.xml <- getURL(url_ft_base) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category") ] <-     select (ETFEI, ("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
select (ETFEI, ("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
select (ETFEI, c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
select (ETFEI, c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category"))
select (ETFEI, c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category"))
ETFEI [ ,]
ETFEI [ 2,]
ft.df [ , c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category") ] <-    ETFEI [ 2,]
View(ft.df)
getwd()
fibonacci(10L)
Sys.setenv(https_proxy="http://C0230649:Miltonee@dia2.santanderuk.gs.corp:80")
Sys.setenv(http_proxy="http://C0230649:Miltonee@dia2.santanderuk.gs.corp:80")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(XML)
library(RCurl)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
url_ETFEI <- "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=ETEXG$XLON_3518|ETALL$$ALL_3518&securityDataPoints=SecId|Name|TenforeId|holdingTypeId|isin|sedol|QR_MonthDate|LegalName|Yield_M12|OngoingCharge|StarRatingM255|CustomCategoryId3Name|CollectedSRRI|QR_GBRReturnM12_5|QR_GBRReturnM12_4|QR_GBRReturnM12_3|QR_GBRReturnM12_2|QR_GBRReturnM12_1|CustomMinimumPurchaseAmount|GBRReturnM0|GBRReturnM12|GBRReturnM36|GBRReturnM60|GBRReturnM120&subUniverseId=ETFEI"
url_ITEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=1000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FCGBR%24%24ALL_3519&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CQR_MonthDate%7CLegalName%7CYield_M12%7CAnnualReportOngoingCharge%7CStarRatingM255%7CCustomCategoryId3Name%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=ITEI"
ETFEI <- getURL(url_ETFEI) %>% fromJSON()  %>% as.data.frame
ITEI<- getURL(url_ITEI) %>% fromJSON()  %>% as.data.frame
#althougt the json gather many fields for this example we just use the below columns
ETFEI <- select (ETFEI,1,6,9,12,14,21)
ITEI <- select (ITEI,1,6,9,12,14,16)
names(ETFEI) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
names(ITEI) <- c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category")
knitr::kable(head(select (ITEI,2, 3,5,6)))
getFinancialtimesHistoricalData <-function(products,months) {
df.return <- data.frame(stringsAsFactors=FALSE)
start.time <- Sys.time() # let's see how much time we are going to spend in this
url.ft.base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=",
gsub("-", "/", Sys.Date()-months(months)) , "&endDate=",
gsub("-", "/", Sys.Date()) , "&symbol=" )
for (i in 1:nrow(products)){
#for (i in 1:5){
url_ft = paste0(url.ft.base,products[i,3]) # third column is sthe isnn
ft.xml <- getURL(url.ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
if (nrow(ft.df) > 2 ) # not all the products have data in financial times,
{
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need and remove the first row
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category") ] <-  products [ i,]
df.return <-rbind( df.return ,ft.df )
} else {   print( paste0( "the product", products[i,3], "Does not have any data in financial times API")) }
}
print( Sys.time() - start.time)
return(df.return)
}
dfe <-getFinancialtimesHistoricalData (ETFEI,24) # the second parameter is the number of months
getFinancialtimesHistoricalData <-function(products,months) {
df.return <- data.frame(stringsAsFactors=FALSE)
start.time <- Sys.time() # let's see how much time we are going to spend in this
url.ft.base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=",
gsub("-", "/", Sys.Date()-months(months)) , "&endDate=",
gsub("-", "/", Sys.Date()) , "&symbol=" )
for (i in 1:nrow(products)){
#for (i in 1:5){
url.ft = paste0(url.ft.base,products[i,3]) # third column is sthe isnn
ft.xml <- getURL(url.ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
if (nrow(ft.df) > 2 ) # not all the products have data in financial times,
{
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need and remove the first row
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category") ] <-  products [ i,]
df.return <-rbind( df.return ,ft.df )
} else {   print( paste0( "the product", products[i,3], "Does not have any data in financial times API")) }
}
print( Sys.time() - start.time)
return(df.return)
}
dfe <-getFinancialtimesHistoricalData (ETFEI,24) # the second parameter is the number of months
View(dfe)
View(dfe)
dfi  <-getFinancialtimesHistoricalData (ITEI,24)
dfi  <-getFinancialtimesHistoricalData (ITEI,24)
#df <-rbind( dfe ,dfi )
df <-dfe
df[,1] <- as.Date(df[,1], format="%a, %b %d, %Y") # date format
converToNumeric = function(x) { as.numeric(gsub(",", "", x, fixed = TRUE)) }
df[,2:5] = sapply(df[,2:5], converToNumeric) # numeric format
saveRDS(df, file.path(getwd(), "../input/etfs_20171106.rds"))
# Load the required libraries
rm(list = ls())
library(data.table)
library(bit64)
library(dplyr)
options(digits=2)
train <- readRDS("./input/etfs_20171106.rds") %>% as.data.frame() # SILENCE
train <- readRDS( file.path(getwd(), "../input/etfs_20171106.rds")) %>% as.data.frame() # SILENCE
# Load the required libraries
rm(list = ls())
library(data.table)
library(bit64)
library(dplyr)
options(digits=2)
train <- readRDS( file.path(getwd(), "../input/etfs_20171106.rds")) %>% as.data.frame() # SILENCE
rm(list = ls())
library(data.table)
library(bit64)
library(dplyr)
setwd('D://repos//blog//mfunds//code//')
options(digits=2)
train <- readRDS( file.path(getwd(), "../input/etfs_20171106.rds")) %>% as.data.frame() # SILENCE
getFinancialtimesHistoricalData <-function(products,months) {
df.return <- data.frame(stringsAsFactors=FALSE)
start.time <- Sys.time() # let's see how much time we are going to spend in this
url.ft.base <- paste0("https://markets.ft.com/data/equities/ajax/get-historical-prices?startDate=",
gsub("-", "/", Sys.Date()-months(months)) , "&endDate=",
gsub("-", "/", Sys.Date()) , "&symbol=" )
for (i in 1:nrow(products)){
#for (i in 1:5){
url.ft = paste0(url.ft.base,products[i,3]) # third column is sthe isnn
ft.xml <- getURL(url.ft) %>% fromJSON() %>%  htmlParse(asText = TRUE)
xmltop = xmlRoot(ft.xml) #gives content of root
ft.df =ldply(xmlToList(xmltop[[1]]), data.frame)
if (nrow(ft.df) > 2 ) # not all the products have data in financial times,
{
ft.df <- ft.df [-1,c(5,8,9,10,11)] # select the columns we need and remove the first row
names(ft.df )<-c("date","Open","High","Low","Close") # rename de columms
ft.df [ , c("type", "Name", "isin" , "LegalName", "OngoingCharge" , "category") ] <-  products [ i,]
df.return <-rbind( df.return ,ft.df )
} else {   print( paste0( "the product", products[i,3], "Does not have any data in financial times API")) }
}
print( Sys.time() - start.time)
return(df.return)
}
#dfe <-getFinancialtimesHistoricalData (ETFEI,24) # the second parameter is the number of months
#dfi  <-getFinancialtimesHistoricalData (ITEI,24)
knitr::opts_chunk$set(echo = TRUE)
url_MFEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=3000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FOGBR%24%24ALL_3521&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CCustomAttributes1%7CCustomAttributes2%7CCustomExternalURL1%7CCustomExternalURL2%7CCustomExternalURL3%7CCustomIsClosed%7CCustomIsFavourite%7CCustomIsRecommended%7CQR_MonthDate%7CLegalName%7CCustomBuyFee%7CYield_M12%7COngoingCharge%7CCustomCategoryId3Name%7CStarRatingM255%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CCustomValue2%7CCustomAdditionalBuyFee%7CCustomSellFee%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=MFEI"
MFEIInc <- MFEI  %>%  filter( !grepl("Acc",LegalName)  ) #here we remove the incremental funds
url_MFEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=3000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FOGBR%24%24ALL_3521&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CCustomAttributes1%7CCustomAttributes2%7CCustomExternalURL1%7CCustomExternalURL2%7CCustomExternalURL3%7CCustomIsClosed%7CCustomIsFavourite%7CCustomIsRecommended%7CQR_MonthDate%7CLegalName%7CCustomBuyFee%7CYield_M12%7COngoingCharge%7CCustomCategoryId3Name%7CStarRatingM255%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CCustomValue2%7CCustomAdditionalBuyFee%7CCustomSellFee%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=MFEI"
MFEI <-getURL(url_MFEI) %>% fromJSON()  %>% as.data.frame
MFEIInc <- MFEI  %>%  filter( !grepl("Acc",LegalName)  ) #here we remove the incremental funds
View(MFEI)
names(MFEI)
gsub("", "rows.", names(MFEI))
names(MFEI)
gsub("rows.", "", names(MFEI))
names(MFEI) <- gsub("rows.", "", names(MFEI))
names(MFEI)
View(MFEI)
MFEIInc <- MFEI  %>%  filter( !grepl("Acc",LegalName)  ) #here we remove the incremental funds
MFEIInc <- select (MFEIInc,1,6,9,15,17, 18)
MFEIInc
View(MFEI)
MFEIInc <- MFEI  %>%  filter( !grepl("Acc",LegalName)  ) # we generate another dataset with just the incremental funds
unique(MFEIInc)
unique(MFEIInc$CustomCategoryId3Name)
unique(MFEI$CustomCategoryId3Name)
unique(MFEIInc$CustomCategoryId3Name)
Bonds <-filter( trainf, CustomCategoryId3Name =="Bonds"  )
Bonds <-filter( MFEIInc, CustomCategoryId3Name =="Bonds"  )
View(Bonds)
View(Bonds)
View(Bonds)
#library(devtools)
#install_github("ropensci/plotly")
library(plotly)
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
#library(devtools)
#install_github("ropensci/plotly")
library(plotly)
p <- plot_ly(
type = 'ohlc',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
p
update.packages()
