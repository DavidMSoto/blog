'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
df.return <-rbind( df.return ,ESG.data )
} else {  # print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
print(url_get)
}
}
View(df.return)
View(ESG.data)
for (i in 1:25){
df.return <- data.frame(stringsAsFactors=FALSE)
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
df.return <-rbind( df.return ,ESG.data )
} else {  print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
#   print(url_get)
}
}
View(ESG.data)
df.return <- data.frame(stringsAsFactors=FALSE)
for (i in 1:25){
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
df.return <-rbind( df.return ,ESG.data )
} else
{
print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
}
}
View(ESG.data)
View(ESG.data)
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
#MFEIInc[i,5] ,
'F00000VHC8',
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
df.return <- data.frame(stringsAsFactors=FALSE)
for (i in 1:25){
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
df.return <-rbind( df.return ,ESG.data )
} else
{
print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
}
}
rm(list = ls())
library(jsonlite)
library(XML)
library(RCurl)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
url_MFEI <-  "http://lt.morningstar.com/api/rest.svc/9vehuxllxs/security/screener?page=1&pageSize=3000&sortOrder=LegalName%20asc&outputType=json&version=1&languageId=en-GB&currencyId=GBP&universeIds=FOGBR%24%24ALL_3521&securityDataPoints=SecId%7CName%7CTenforeId%7CholdingTypeId%7Cisin%7Csedol%7CCustomAttributes1%7CCustomAttributes2%7CCustomExternalURL1%7CCustomExternalURL2%7CCustomExternalURL3%7CCustomIsClosed%7CCustomIsFavourite%7CCustomIsRecommended%7CQR_MonthDate%7CLegalName%7CCustomBuyFee%7CYield_M12%7COngoingCharge%7CCustomCategoryId3Name%7CStarRatingM255%7CQR_GBRReturnM12_5%7CQR_GBRReturnM12_4%7CQR_GBRReturnM12_3%7CQR_GBRReturnM12_2%7CQR_GBRReturnM12_1%7CCustomMinimumPurchaseAmount%7CCustomValue2%7CCustomAdditionalBuyFee%7CCustomSellFee%7CGBRReturnM0%7CGBRReturnM12%7CGBRReturnM36%7CGBRReturnM60%7CGBRReturnM120&filters=&term=&subUniverseId=MFEI"
MFEI <-getURL(url_MFEI) %>% fromJSON()  %>% as.data.frame
names(MFEI)
names(MFEI) <- gsub("rows.", "", names(MFEI)) # nicer names
fondos<-MFEI
MFEIInc <- fondos  %>%  filter( !grepl("Acc",LegalName)) # we generate another dataset with just the incremental funds
MFEIAcc <- fondos  %>%  filter( !grepl("Inc",LegalName))
MFEIAccempty <-MFEIAcc %>% filter(  is.na(CustomCategoryId3Name))
MFEIIncempty <-MFEIInc %>% filter(  is.na(CustomCategoryId3Name))
MFEIInc %>% filter( grepl("Emer",LegalName, ignore.case = T))
MFEIInc %>% filter( grepl("Global",LegalName, ignore.case = T))
url_get <- 'http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/F00000NGLO?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en'
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
View(ESG.data)
str(ESG.data)
str(ESG.data[4,1])
str(ESG.data[1,4])
str(ESG.data[1,5])
df.return <- data.frame(stringsAsFactors=FALSE)
for (i in 1:25){
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
df.return <-rbind( df.return ,ESG.data[1,5] )
} else
{
print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
}
}
View(df.return)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
ncol(df.return)
df.return <- data.frame(stringsAsFactors=FALSE)
for (i in 1:25){
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
if (ncol(ESG.data[1,5] == '11')) df.return <-rbind( df.return ,ESG.data[1,5] )
} else
{
print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
}
}
df.return <- data.frame(stringsAsFactors=FALSE)
for (i in 1:25){
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
if (ncol(ESG.data[1,5] == '11'))
{df.return <-rbind( df.return ,ESG.data[1,5] ) }
} else
{
print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
}
}
df.return <- data.frame(stringsAsFactors=FALSE)
for (i in 1:25){
url_get <- paste0("http://tools.morningstar.co.uk/api/rest.svc/t92wz0sj7c/security_details/",
MFEIInc[i,5] ,
'?viewId=sustainability&idtype=msid&responseViewFormat=json&languageId=en')
ESG.data <-getURL(url_get) %>% fromJSON()  %>% as.data.frame
if (ncol(ESG.data) > 5 ) # these are the products with ESG information
{
print( paste0( "the product ",  MFEIInc[i,5], " Does  have sustianibilita dadta ", i ))
df.return <-rbind( df.return ,ESG.data[1,5] , fill=T)
} else
{
print( paste0( "the product ",  MFEIInc[i,5], " Does not have sustianibilita dadta" ,  i ))
}
}
rm(list = ls())
library(jsonlite)
library(XML)
library(RCurl)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(devtools)
install_github("ropensci/plotly")
p <- plot_ly(
type = 'table',  # Specify type of plot as table
# header is a list and every parameter shown below needs
# to be specified. Note that html tags can be used as well
header = list(
# First specify table headers
# Note the enclosure within 'list'
values = list(list('<b>EXPENSES</b>'),
list('<b>Q1</b>'),
list('<b>Q2</b>'),
list('<b>Q3</b>'),
list('<b>Q4</b>')),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left','left','left','left','left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14)
),
# Specify individual cells
cells = list(
# Now specify each cell content
values = list(
c('Salaries', 'Office', 'Merchandise', 'Legal', '<b>TOTAL</b>'),
c(1200000, 20000, 80000, 2000, 12120000),
c(1300000, 20000, 70000, 2000, 130902000),
c(1300000, 20000, 120000, 2000, 131222000),
c(1400000, 20000, 90000, 2000, 14102000)),
# Formatting
line = list(color = '#DFE8F3'),
align = c('left', 'left', 'left', 'left', 'left'),
font = list(color = c('#506784', '#506784', '#506784', '#506784', '#ab63fa'), size = 14),
height = 48
)) %>%
# Layout is needed to remove gridlines, axis zero lines and ticktext
# or else they will also show up
layout(xaxis = list(zeroline = F, showgrid = F, showticklabels = F, domain = c(0, 0.5)),
yaxis = list(zeroline = F, showgrid = F, showticklabels = F))
rm(list = ls())
df <-readRDS("../input/etfs_itei.rds")
getwd()
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
df <-readRDS("../input/etfs_itei.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
t <-tail (dfa[order(dfa$rsi),], 1)
h <-head (dfa[order(dfa$rsi),], 1)
View(df)
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
print(nrow(e))   print(i)
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
print(nrow(e))
print(i)
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
if (nrow(e) > 14)
{
print(i)
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
else {   print( paste0( "the product",i,"is too small" )) }
}
rm(list = ls())
WIN <- TRUE
if (WIN) {setwd("D:\\repos\\blog\\mfunds\\input\\")} else{setwd("~/dataScience/projects/repo/mfunds/code/")}
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
if (nrow(i) > 14)
{
print(i)
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
else {   print( paste0( "the product",i,"is too small" )) }
}
rm(list = ls())
df <-readRDS("../input/etfs_itei.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
t <-tail (dfa[order(dfa$rsi),], 1)
h <-head (dfa[order(dfa$rsi),], 1)
rm(list = ls())
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
rm(list = ls())
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
if (nrow(i) > 14)
{
print(i)
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
else {   print( paste0( "the product",i,"is too small" )) }
}
rm(list = ls())
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
if (nrow(vector) > 14)
{
print(i)
e <- dplyr::filter(df,  isin == i)
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
else {   print( paste0( "the product",i,"is too small" )) }
}
rm(list = ls())
df <-readRDS("../input/etfs_20171108.rds")
library(TTR) #  rsi() for calculating simple moving average
vector <- unique(df$isin)
dfa <- data.frame(stringsAsFactors=FALSE)
for (i in vector)
{
e <- dplyr::filter(df,  isin == i)
if (nrow(e) > 14)
{
e <- e[order(as.Date(e$date, format="%Y-%m-%d")),]
rsi <- RSI(e$Close, n=14)
e$rsi <-rsi
tail <- tail(e, 1)
dfa <-rbind( dfa ,tail )
}
else {   print( paste0( "the product",vector,"is too small" )) }
}
t <-tail (dfa[order(dfa$rsi),], 1)
h <-head (dfa[order(dfa$rsi),], 1)
View(dfa)
View(dfa)
t <-tail (dfa[order(dfa$rsi),], 1)
h <-head (dfa[order(dfa$rsi),], 1)
library(plotly)
p1 <- plot_ly() %>%
add_trace(data=dplyr::filter(df,  isin == h$isin),
x = ~date, y = ~Close, type="scatter", mode="lines", name = h$isin)
p1
p2 <- plot_ly() %>%
add_trace(data=dplyr::filter(df,  isin == t$isin),
x = ~date, y = ~Close, type="scatter", mode = "lines" , name = t$isin)
p2
View(h)
View(tail)
View(dfa)
View(h)
View(t)
View(dfa)
detach("package:plyr", unload=TRUE)
aa <- dfa %>% group_by( category) %>%   summarise(count= n())
pp <- plot_ly(aa, x = ~category, y = ~count,
type = 'scatter' , mode = 'markers', marker = list(size = 15))  %>%
layout(title = "numbers of ratings by month",  showlegend = TRUE)
pp
View(dfa)
aa <- dfa %>% group_by( category) %>%   summarise(count= n()) %>% filter(type == 'ETFEI' )
aa <- dfa %>% group_by( category) %>%  filter(type == 'ETFEI' )  %>% summarise(count= n())
View(aa)
detach("package:plyr", unload=TRUE)
aa <- dfa %>% group_by( category) %>%  filter(type == 'ETFEI' )  %>% summarise(count= n())
pp <- plot_ly(aa, x = ~category, y = ~count,
type = 'scatter' , mode = 'markers', marker = list(size = 15))  %>%
layout(title = "numbers of etfs by category",  showlegend = TRUE)
pp
aa <- dfa %>% group_by( category) %>% filter(type == 'ITEI' )  %>%   summarise(count= n())
pp <- plot_ly(aa, x = ~category, y = ~count,
type = 'scatter' , mode = 'markers', marker = list(size = 15))  %>%
layout(title = "numbers of IF by category",  showlegend = TRUE)
pp
source('~/.active-rstudio-document', echo=TRUE)
dfa  %>%  filter( grepl("Gold",LegalName)  )
MFEIInc <- dfa  %>%  filter( grepl("Gold",LegalName)  ) #here we remove the incremental funds
View(MFEIInc)
MFEIInc <- dfa  %>%  filter( grepl(c("Gold","Physical"),LegalName)  ) #here we remove the incremental funds
MFEIInc <- dfa  %>%  filter( grepl(c("Gold","etfs"),LegalName) ,ignore.case=F  ) #here we remove the incremental funds
MFEIInc <- dfa  %>%  filter( grepl(c("Gold","etfs"),LegalName ,ignore.case=F  )) #here we remove the incremental funds
thingslooklikeMaterial <- c("Gold","etfs")
MFEIInc <- dfa  %>%  filter( grepl(thingslooklikeMaterial,LegalName ,ignore.case=F  ))
MFEIInc <- dfa  %>%  filter( grepl(paste(patterns, collapse="|"),LegalName  ))
MFEIInc <- dfa  %>%  filter( grepl(paste(thingslooklikeMaterial, collapse="|"),LegalName  ))
thingslooklikeMaterial <- c("Gold","etfs")
result <-dfa  %>%  filter( grepl(paste(thingslooklikeMaterial, collapse="|"), Letter))
thingslooklikeMaterial <- c("Gold","etfs")
MFEIInc <- dfa  %>%  filter( grepl(paste(thingslooklikeMaterial, collapse="|"),LegalName , ignore.case=F ))
thingslooklikeMaterial <- c("gold","etfs")
MFEIInc <- dfa  %>%  filter( grepl(paste(thingslooklikeMaterial, collapse="|"),LegalName , ignore.case=T ))
View(MFEIInc)
View(MFEIInc)
thingslooklikeMaterial <- c("gold","etfs",'Physical', 'silver')
MFEIInc <- dfa  %>%  filter( grepl(paste(thingslooklikeMaterial, collapse="|"),LegalName , ignore.case=T ))
thingslooklikeMaterial <- c("gold",'Physical', 'silver')
MFEIInc <- dfa  %>%  filter( grepl(paste(thingslooklikeMaterial, collapse="|"),LegalName , ignore.case=T ))
View(MFEIInc)
View(e)
View(dfa)
View(dfa)
p1 <- plot_ly() %>%
add_trace(data=dplyr::filter(df,  isin == 'IE00B4PY7Y77'),
x = ~date, y = ~Close, type="scatter", mode="lines", name = 'IE00B4PY7Y77')
p1
p1 <- plot_ly() %>%
add_trace(data=dplyr::filter(df,  isin == 'IE00B4PY7Y77'),
x = ~date, y = ~Close, type="scatter", mode="lines", name = 'IE00B4PY7Y77')
p1
stock <- dfa  %>% filter(type == 'ITEI' )
View(stock)
stock <- df  %>% filter(isin == 'IE00B4PY7Y77')
plot(stock$Close)
historical.data.overbought <- df %>%  filter(selected,  t$isin)
historical.data.overbought <- df %>%  filter(isin == t$isin)
historical.data.overbought$SMA26 <- SMA(historical.data.overbought$Close, 26)
historical.data.overbought$SMA12 <- SMA(historical.data.overbought$Close, 12)
historical.data.overbought$SMA200 <- SMA(historical.data.overbought$Close, 200)
p <-plot_ly() %>%
add_trace(data= GB00B1XFGM25,
x = ~date, y = ~Close, type="scatter", mode="lines", name = "GB00B1XFGM25") %>%
add_trace(x = ~date,y = ~SMA26, type="scatter", mode="lines", name = "SMA26") %>%
add_trace(x = ~date,y = ~SMA12, type="scatter", mode="lines", name = "SMA12") %>%
add_trace(x = ~date,y = ~SMA200, type="scatter", mode="lines", name = "SMA200")
p <-plot_ly() %>%
add_trace(data= historical.data.overbought,
x = ~date, y = ~Close, type="scatter", mode="lines", name = "historical.data.overbought") %>%
add_trace(x = ~date,y = ~SMA26, type="scatter", mode="lines", name = "SMA26") %>%
add_trace(x = ~date,y = ~SMA12, type="scatter", mode="lines", name = "SMA12") %>%
add_trace(x = ~date,y = ~SMA200, type="scatter", mode="lines", name = "SMA200")
print(p)
View(historical.data.overbought)
ob <- historical.data.overbought[order(as.Date(historical.data.overbought$date, format="%Y-%m-%d")),]
ob$SMA26 <- SMA(ob$Close, 26)
ob$SMA12 <- SMA(ob$Close, 12)
ob$SMA200 <- SMA(ob$Close, 200)
p <-plot_ly() %>%
add_trace(data= ob,
x = ~date, y = ~Close, type="scatter", mode="lines", name = "historical.data.overbought") %>%
add_trace(x = ~date,y = ~SMA26, type="scatter", mode="lines", name = "SMA26") %>%
add_trace(x = ~date,y = ~SMA12, type="scatter", mode="lines", name = "SMA12") %>%
add_trace(x = ~date,y = ~SMA200, type="scatter", mode="lines", name = "SMA200")
p
